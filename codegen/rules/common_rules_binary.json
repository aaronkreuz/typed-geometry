[
    {
        "implementer" : [
            {
                "func_name" : "intersection",
                "param_types" : ["AAA","BBB"],
                "return_type" : ""
            }
        ],
        "implementee" : "intersects",
        "type_A_boundary_tag" : "",
        "type_B_boundary_tag" : "",
        "type_A" : "",
        "type_B" : "",
        "implementation" : "return intersection(AAA, BBB).has_value();",
        "file" : "intersection.json"
    },
    {
        "implementer" : [
            {
                "func_name" : "closest_intersection_parameter",
                "param_types" : ["AAA","BBB"],
                "return_type" : ""
            }
        ],
        "implementee" : "intersects",
        "type_A_boundary_tag" : "",
        "type_B_boundary_tag" : "",
        "type_A" : "",
        "type_B" : "",
        "implementation" : "return closest_intersection_parameter(AAA, BBB).has_value();",
        "file" : "intersection.json"
    },
    {
        "implementer" : [
            {
                "func_name" : "contains",
                "param_types" : ["solid_of(AAA)","BBB","dont_deduce<ScalarT>"],
                "return_type" : ""
            }
        ],
        "implementee" : "intersects",
        "type_A_boundary_tag" : "required",
        "type_B_boundary_tag" : "",
        "type_A" : "",
        "type_B" : "",
        "implementation" : "using ScalarT = typename decltype(AAA)::scalar_t;\nauto const solidA = solid_of(AAA);\nif (contains(solidA, BBB, ScalarT(-16) * tg::epsilon<ScalarT>))\n    return false;\nreturn intersects(solidA, BBB);",
        "file" : "intersection.json"
    },
    {
        "implementer" : [
            {
                "func_name" : "intersection_parameter",
                "param_types" : ["AAA","BBB"],
                "return_type" : "cc::optional"
            }
        ],
        "implementee" : "intersection",
        "type_A_boundary_tag" : "",
        "type_B_boundary_tag" : "",
        "type_A" : "",
        "type_B" : "",
        "implementation" : "if (auto t = intersection_parameter(AAA, BBB); t.has_value())\n    return AAA[t.value()];\nreturn {};",
        "file" : "intersection.json"
    },
    {
        "implementer" : [
            {
                "func_name" : "intersection_parameter",
                "param_types" : ["AAA","BBB"],
                "return_type" : ""
            }
        ],
        "implementee" : "intersection",
        "type_A_boundary_tag" : "",
        "type_B_boundary_tag" : "",
        "type_A" : "",
        "type_B" : "",
        "implementation" : "return AAA[intersection_parameter(AAA, BBB)];",
        "file" : "intersection.json"
    }
]